<?php

/**
 * @file
 * Defines the gift entity and associated features.
 */

use Drupal\commerce\BundleFieldDefinition;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Render\Element;

use Drupal\commerce_order\Entity\Order;
use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_order\Entity\OrderItem;
use Drupal\commerce_order\Entity\OrderItemInterface;

/**
 * Implements hook_config_translation_info_alter().
 */
function commerce_gift_config_translation_info_alter(&$info) {
  $info['commerce_gift_attribute']['class'] = '\Drupal\commerce_gift\ConfigTranslation\GiftAttributeMapper';
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function commerce_gift_entity_form_display_update(EntityFormDisplayInterface $form_display) {
  // Reset the cached attribute field map when the 'default' gift variation
  // form mode is updated, since the map ordering is based on it.
  if ($form_display->getTargetEntityTypeId() == 'commerce_gift_variation' && $form_display->getMode() == 'default') {
    $attribute_field_manager = \Drupal::service('commerce_gift.attribute_field_manager');
    $attribute_field_manager->clearCaches();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function commerce_gift_entity_view_display_update(EntityInterface $entity) {
  // The gift view uses the variation view and needs to be cleared, which doesn't happen automatically
  // because we're editing the variation, not the gift
  if (substr($entity->getConfigTarget(), 0, 27) === 'commerce_gift_variation.') {
    Cache::invalidateTags(['commerce_gift_view']);
  }
}

/**
* Implements hook_ENTITY_TYPE_update().
*/
function commerce_gift_commerce_order_update(EntityInterface $entity) {

  // Checks the order to see if it is complete
  if ($entity->getCompletedTime() > 0) {
    drupal_set_message('Called Commerce Order Update');
    // Checks if this order has a commerce_gift in one of the order items.
    if (has_commerce_gift($entity->getItems())) {
      // Gets the record for this order from the database.
      $query = \Drupal::database()
        ->select('commerce_gift_order', 'go');
      $query->condition('go.order_id', $entity->getOrderNumber(), '=' );
      $query->fields('go', [
        'order_id',
        'gift_order_id',
        'first_name',
        'last_name',
        'email'
      ]);
      $result = $query->execute()->fetchAllAssoc('order_id');
      if (isset($result[$entity->getOrderNumber()])) {
        $record = $result[$entity->getOrderNumber()];
        if ($record->gift_order_id < 1) {
          // need processing.
          process_gift_order($entity, $record);
        }
      }
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function commerce_gift_entity_access(EntityInterface $entity, $operation, $account) {
  // Allow published gifts to be viewed by all users for now.
  // @todo Remove once we implement the full gift permissions.
  if ($operation == 'view') {
    if ($entity->getEntityTypeId() == 'commerce_gift' && $entity->isPublished()) {
      return AccessResult::allowed();
    }
    elseif ($entity->getEntityTypeId() == 'commerce_gift_variation' && $entity->isActive()) {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function commerce_gift_theme() {
  return [
    'commerce_gift_form' => [
      'render element' => 'form',
    ],
    'commerce_gift' => [
      'render element' => 'elements',
    ],
    'commerce_gift_variation' => [
      'render element' => 'elements',
    ],
    'commerce_gift_attribute_value' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_gift().
 */
function commerce_gift_theme_suggestions_commerce_gift(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_gift', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_gift_variation().
 */
function commerce_gift_theme_suggestions_commerce_gift_variation(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_gift_variation', $variables);
}

/**
 * Implements hook_theme_suggestions_commerce_gift_commerce_gift_attribute_value().
 */
function commerce_gift_theme_suggestions_commerce_gift_attribute_value(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_gift_attribute_value', $variables);
}

/**
 * Prepares variables for gift templates.
 *
 * Default template: commerce-gift.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_gift(array &$variables) {
  /** @var Drupal\commerce_gift\Entity\giftInterface $gift */
  $gift = $variables['elements']['#commerce_gift'];

  $variables['gift_entity'] = $gift;
  $variables['gift_url'] = $gift->toUrl();
  $variables['gift'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['gift'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for gift variation templates.
 *
 * Default template: commerce-gift-variation.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_gift_variation(array &$variables) {
  /** @var Drupal\commerce_gift\Entity\giftVariationInterface $gift_variation */
  $gift_variation = $variables['elements']['#commerce_gift_variation'];
  $gift = $gift_variation->getgift();

  $variables['gift_variation_entity'] = $gift_variation;
  $variables['gift_url'] = $gift->toUrl();
  $variables['gift_variation'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['gift_variation'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for gift attribute value templates.
 *
 * Default template: commerce-gift-attribute-value.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_gift_attribute_value(array &$variables) {
  /** @var Drupal\commerce_gift\Entity\giftAttributeValueInterface $gift */
  $attribute_value = $variables['elements']['#commerce_gift_attribute_value'];

  $variables['gift_attribute_value_entity'] = $attribute_value;
  $variables['gift_attribute_value'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['gift_attribute_value'][$key] = $variables['elements'][$key];
  }
}

/**
 * Adds the default stores field to a gift.
 *
 * A gift can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_gift\Entity\giftTypeInterface $gift_type
 *   The gift type.
 */
function commerce_gift_add_stores_field($gift_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_gift')
    ->setTargetBundle($gift_type->id())
    ->setName('stores')
    ->setLabel('Stores')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_store')
    ->setSetting('handler', 'default')
    ->setDisplayOptions('form', [
      'type' => 'commerce_entity_select',
      'weight' => -10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Adds the default body field to a gift type.
 *
 * @param \Drupal\commerce_gift\Entity\giftTypeInterface $gift_type
 *   The gift type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_gift_add_body_field($gift_type, $label = 'Body') {
  $field_definition = BundleFieldDefinition::create('text_with_summary')
    ->setTargetEntityTypeId('commerce_gift')
    ->setTargetBundle($gift_type->id())
    ->setName('body')
    ->setLabel($label)
    ->setSetting('display_summary', FALSE)
    ->setDisplayOptions('form', [
      'type' => 'text_textarea_with_summary',
      'weight' => 1,
    ])
    ->setDisplayOptions('view', [
      'label' => 'hidden',
      'type' => 'text_default',
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition, FALSE);
}

/**
 * Adds the default variations field to a gift type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each gift type.
 *
 * @param \Drupal\commerce_gift\Entity\giftTypeInterface $gift_type
 *   The gift type.
 */
function commerce_gift_add_variations_field($gift_type) {
  $field_definition = BundleFieldDefinition::create('entity_reference')
    ->setTargetEntityTypeId('commerce_gift')
    ->setTargetBundle($gift_type->id())
    ->setName('variations')
    ->setLabel('Variations')
    ->setCardinality(BundleFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_gift_variation')
    ->setSetting('handler', 'default')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        $gift_type->getVariationTypeId(),
      ],
    ])
    ->setDisplayOptions('form', [
      'type' => 'inline_entity_form_complex',
      'weight' => 10,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'variation',
        'label_plural' => 'variations',
      ],
    ])
    ->setDisplayOptions('view', [
      'type' => 'commerce_gift_add_to_cart',
      'weight' => 10,
    ]);

  $configurable_field_manager = \Drupal::service('commerce.configurable_field_manager');
  $configurable_field_manager->createField($field_definition);
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_gift_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  $required = $field_definition->isRequired();
  if ($field_name == 'path' && $entity_type == 'commerce_gift' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this gift. Use a relative path. For example, "/my-gift".');
  }
  elseif ($field_name == 'title' && $entity_type == 'commerce_gift_variation' && !$required) {
    // The title field is optional only when its value is automatically
    // generated, in which case the widget needs to be hidden.
    $element['#access'] = FALSE;
  }
}

/**
* Helper function to check if an order has gifts.
*/
function has_commerce_gift($items) {
  foreach ($items as $item) {
    $purchasedEntity = $item->getPurchasedEntity();
    $string = get_class($purchasedEntity);
    if ( is_a($purchasedEntity, 'Drupal\commerce_gift\Entity\GiftVariation') ) {
      return true;
    }
  }
  return false;
}

/**
* Helper function to create a new $0 order for the gift
* and assign it to the correct user.
*/
function process_gift_order($entity, $record) {

  // First we need to check if the email for the gift getter exists as a user.
  $account = user_load_by_mail($record->email);
  if ($account == null) {
    // Create a new user account.
    $account = commerce_gift_create_account($record);
  }

  // Next we need to create the order for this gift getter.
  $data = array(
    'type' => 'default',
    'uid' => $account->id(),
    'store_id' => $entity->getStoreId(),
    'mail' => $record->email,
    'completed' => time(),
    'created' => time(),
    'changed' => time(),
    'state' => 'completed'
  );
  $order = Order::create($data);
  $order->save();


  // Next we need to loop through the items from the original order, adding them to the new
  // order.
  $gift_items = $entity->getItems();
  $orderItemStorage = \Drupal::entityTypeManager()
    ->getStorage('commerce_order_item');
  foreach($gift_items as $gift_item) {
    // Create a new order item.
    $pEntity = $gift_item->getPurchasedEntity();
    if ( is_a($pEntity, 'Drupal\commerce_gift\Entity\GiftVariation') ) {
      // @TODO: Do this as a plugin maybe to handle a larger number of things.
      $purchasedTarget = ($pEntity->get('product')->entity) ? $pEntity->get('product')->entity : $pEntity->get('license')->entity;
      $order_item = $orderItemStorage
        ->createFromPurchasableEntity($purchasedTarget);
      $order_item->setQuantity($gift_item->getQuantity());
      $order_item->save();
      $order->addItem($order_item);
    }
  }
  $order->save();
}


function commerce_gift_create_account($values) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $user = \Drupal\user\Entity\User::create();

//Mandatory settings
  $user->setPassword('password');
  $user->enforceIsNew();
  $user->setEmail($values->email);
  $user->setUsername($values->email);//This username must be unique and accept only a-Z,0-9, - _ @ .

//Optional settings
  $user->set("init", 'email');
  $user->set("langcode", $language);
  $user->set("preferred_langcode", $language);
  $user->set("preferred_admin_langcode", $language);
  $user->activate();

//Save user
  $account = $user->save();
  return $user;
}
